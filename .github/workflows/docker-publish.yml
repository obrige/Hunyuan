name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 
      name: 检出代码并获取完整历史记录

    - name: 列出当前目录文件以调试
      run: |
        ls -la
        find . -name "go.mod" -type f
        find . -name "Dockerfile" -type f

    - name: 设置Go环境
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true  
        cache-dependency-path: 'go.sum'  

    - name: 检查并初始化Go模块
      run: |
        if [ -f "go.mod" ]; then
          echo "GO_MODULE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "go.mod file not found, initializing a new Go module..."
          MODULE_NAME="github.com/${{ github.repository }}"
          go mod init "$MODULE_NAME"
          echo "GO_MODULE_EXISTS=true" >> $GITHUB_ENV
        fi

    - name: 运行Go测试
      if: env.GO_MODULE_EXISTS == 'true'
      run: |
        if [ -f "go.sum" ] || [ -d "vendor" ]; then
          go mod tidy
        fi
        go test ./... -v || echo "Warning: Go tests failed or no test files found, continuing build..."

    - name: 检查是否存在Dockerfile文件
      run: |
        if [ -f "Dockerfile" ]; then
          echo "DOCKERFILE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "Dockerfile not found in root directory. Please ensure Dockerfile exists or specify the correct path."
          exit 1
        fi

    - name: 构建Docker镜像并添加时间戳和Git SHA标签
      if: env.DOCKERFILE_EXISTS == 'true'
      run: |
        TIMESTAMP=$(date +%s)
        docker build . --file Dockerfile --tag my-image-name:$TIMESTAMP --tag my-image-name:${{ github.sha }}

    - name: 如果需要推送则登录Docker Hub
      if: github.event_name == 'push' && env.DOCKERFILE_EXISTS == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 如果需要推送则登录GitHub Container Registry
      if: github.event_name == 'push' && env.DOCKERFILE_EXISTS == 'true'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 推送Docker镜像到Docker Hub
      if: github.event_name == 'push' && env.DOCKERFILE_EXISTS == 'true'
      run: |
        docker push my-image-name:${{ github.sha }}
        docker push my-image-name:$(date +%s)

    - name: 推送Docker镜像到GitHub Container Registry
      if: github.event_name == 'push' && env.DOCKERFILE_EXISTS == 'true'
      run: |
        # 使用shell命令将repository_owner转为小写
        OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        GHCR_IMAGE=ghcr.io/$OWNER/my-image-name
        TIMESTAMP=$(date +%s)
        docker tag my-image-name:${{ github.sha }} $GHCR_IMAGE:${{ github.sha }}
        docker tag my-image-name:$TIMESTAMP $GHCR_IMAGE:$TIMESTAMP
        docker push $GHCR_IMAGE:${{ github.sha }}
        docker push $GHCR_IMAGE:$TIMESTAMP

    - name: 测试Docker镜像功能
      if: env.DOCKERFILE_EXISTS == 'true'
      run: |
        docker run --rm my-image-name:${{ github.sha }} echo "Docker image test passed"

    - name: 清理本地Docker镜像以释放空间
      if: always()
      run: |
        docker rmi -f $(docker images -q my-image-name*) 2>/dev/null || true
        # 使用shell命令将repository_owner转为小写以匹配镜像名称
        OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        docker rmi -f $(docker images -q ghcr.io/$OWNER/my-image-name*) 2>/dev/null || true
