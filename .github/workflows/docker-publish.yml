name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  
      name: 检出代码并获取完整历史记录

    - name: 设置Go环境
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true  
        cache-dependency-path: 'go.sum'  

    - name: 检查是否存在go.mod文件
      run: |
        if [ -f "go.mod" ]; then
          echo "GO_MODULE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "GO_MODULE_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: 运行Go测试
      if: env.GO_MODULE_EXISTS == 'true'
      run: |
        go test ./... -v

    - name: 设置Docker Buildx以支持多平台构建
      uses: docker/setup-buildx-action@v3

    - name: 如果需要推送则登录Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 如果需要推送则登录GitHub Container Registry
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 构建Docker镜像并添加时间戳和Git SHA标签
      run: |
        TIMESTAMP=$(date +%s)
        docker build . --file Dockerfile --tag my-image-name:$TIMESTAMP --tag my-image-name:${{ github.sha }}

    - name: 推送Docker镜像到Docker Hub
      if: github.event_name == 'push'
      run: |
        docker push my-image-name:${{ github.sha }}
        docker push my-image-name:$(date +%s)

    - name: 推送Docker镜像到GitHub Container Registry
      if: github.event_name == 'push'
      run: |
        OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        GHCR_IMAGE=ghcr.io/$OWNER/my-image-name
        TIMESTAMP=$(date +%s)
        docker tag my-image-name:${{ github.sha }} $GHCR_IMAGE:${{ github.sha }}
        docker tag my-image-name:$TIMESTAMP $GHCR_IMAGE:$TIMESTAMP
        docker push $GHCR_IMAGE:${{ github.sha }}
        docker push $GHCR_IMAGE:$TIMESTAMP

    - name: 测试Docker镜像功能
      run: |
        docker run --rm my-image-name:${{ github.sha }} echo "Docker image test passed"

    - name: 清理本地Docker镜像以释放空间
      if: always()
      run: |
        docker rmi -f $(docker images -q my-image-name*) 2>/dev/null || true
        OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        docker rmi -f $(docker images -q ghcr.io/$OWNER/my-image-name*) 2>/dev/null || true
